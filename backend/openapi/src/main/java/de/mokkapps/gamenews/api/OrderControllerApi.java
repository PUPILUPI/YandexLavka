/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.mokkapps.gamenews.api;

import de.mokkapps.gamenews.api.model.CompleteOrderRequestDto;
import de.mokkapps.gamenews.api.model.CreateOrderRequest;
import java.util.Date;
import de.mokkapps.gamenews.api.model.OrderAssignResponse;
import de.mokkapps.gamenews.api.model.OrderDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-06T14:16:00.723357+03:00[Europe/Moscow]")

@Api(value = "OrderController", description = "the OrderController API")
public interface OrderControllerApi {

    /**
     * POST /orders/complete
     *
     * @param completeOrderRequestDto  (required)
     * @return ok (status code 200)
     *         or bad request (status code 400)
     */
    @ApiOperation(value = "", nickname = "completeOrder", notes = "", response = OrderDto.class, responseContainer = "List", tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = OrderDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad request", response = Object.class) })
    @RequestMapping(value = "/orders/complete",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<List<OrderDto>> completeOrder(@ApiParam(value = "" ,required=true )   @RequestBody CompleteOrderRequestDto completeOrderRequestDto);


    /**
     * POST /orders
     *
     * @param createOrderRequest  (required)
     * @return ok (status code 200)
     *         or bad request (status code 400)
     */
    @ApiOperation(value = "", nickname = "createOrder", notes = "", response = OrderDto.class, responseContainer = "List", tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = OrderDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad request", response = Object.class) })
    @RequestMapping(value = "/orders",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<List<OrderDto>> createOrder(@ApiParam(value = "" ,required=true )   @RequestBody CreateOrderRequest createOrderRequest);


    /**
     * GET /orders/{order_id}
     *
     * @param orderId Order identifier (required)
     * @return ok (status code 200)
     *         or bad request (status code 400)
     *         or not found (status code 404)
     */
    @ApiOperation(value = "", nickname = "getOrder", notes = "", response = OrderDto.class, tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = OrderDto.class),
        @ApiResponse(code = 400, message = "bad request", response = Object.class),
        @ApiResponse(code = 404, message = "not found", response = Object.class) })
    @RequestMapping(value = "/orders/{order_id}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<OrderDto> getOrder(@ApiParam(value = "Order identifier",required=true) @PathVariable("order_id") Long orderId);


    /**
     * GET /orders
     *
     * @param limit Максимальное количество заказов в выдаче. Если параметр не передан, то значение по умолчанию равно 1. (optional)
     * @param offset Количество заказов, которое нужно пропустить для отображения текущей страницы. Если параметр не передан, то значение по умолчанию равно 0. (optional)
     * @return ok (status code 200)
     *         or bad request (status code 400)
     */
    @ApiOperation(value = "", nickname = "getOrders", notes = "", response = OrderDto.class, responseContainer = "List", tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = OrderDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad request", response = Object.class) })
    @RequestMapping(value = "/orders",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<OrderDto>> getOrders(@ApiParam(value = "Максимальное количество заказов в выдаче. Если параметр не передан, то значение по умолчанию равно 1.")  @RequestParam(value = "limit", required = false) Optional<Integer> limit,@ApiParam(value = "Количество заказов, которое нужно пропустить для отображения текущей страницы. Если параметр не передан, то значение по умолчанию равно 0.")  @RequestParam(value = "offset", required = false) Optional<Integer> offset);


    /**
     * POST /orders/assign : Распределение заказов по курьерам
     * Для распределения заказов между курьерами учитываются следующие параметры: &lt;ul&gt;&lt;li&gt;вес заказа&lt;/li&gt;&lt;li&gt;регион доставки&lt;/li&gt;&lt;li&gt;стоимость доставки&lt;/li&gt;&lt;/ul&gt;
     *
     * @param date Дата распределения заказов. Если не указана, то используется текущий день (optional)
     * @return ok (status code 201)
     *         or bad request (status code 400)
     */
    @ApiOperation(value = "Распределение заказов по курьерам", nickname = "ordersAssign", notes = "Для распределения заказов между курьерами учитываются следующие параметры: <ul><li>вес заказа</li><li>регион доставки</li><li>стоимость доставки</li></ul>", response = OrderAssignResponse.class, responseContainer = "List", tags={ "order-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "ok", response = OrderAssignResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad request", response = Object.class) })
    @RequestMapping(value = "/orders/assign",
        produces = "application/json", 
        method = RequestMethod.POST)
    ResponseEntity<List<OrderAssignResponse>> ordersAssign(@ApiParam(value = "Дата распределения заказов. Если не указана, то используется текущий день")  @RequestParam(value = "date", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) Optional<Date> date);

}
