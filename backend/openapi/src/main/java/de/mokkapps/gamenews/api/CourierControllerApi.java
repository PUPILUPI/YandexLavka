/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.mokkapps.gamenews.api;

import de.mokkapps.gamenews.api.model.CourierDto;
import de.mokkapps.gamenews.api.model.CreateCourierRequest;
import de.mokkapps.gamenews.api.model.CreateCouriersResponse;
import java.util.Date;
import de.mokkapps.gamenews.api.model.GetCourierMetaInfoResponse;
import de.mokkapps.gamenews.api.model.GetCouriersResponse;
import de.mokkapps.gamenews.api.model.OrderAssignResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-06T14:16:00.723357+03:00[Europe/Moscow]")

@Api(value = "CourierController", description = "the CourierController API")
public interface CourierControllerApi {

    /**
     * GET /couriers/assignments : Список распределенных заказов
     *
     * @param date Дата распределения заказов. Если не указана, то используется текущий день (optional)
     * @param courierId Идентификатор курьера для получения списка распредленных заказов. Если не указан, возвращаются данные по всем курьерам. (optional)
     * @return ok (status code 200)
     *         or bad request (status code 400)
     */
    @ApiOperation(value = "Список распределенных заказов", nickname = "couriersAssignments", notes = "", response = OrderAssignResponse.class, tags={ "courier-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = OrderAssignResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = Object.class) })
    @RequestMapping(value = "/couriers/assignments",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<OrderAssignResponse> couriersAssignments(@ApiParam(value = "Дата распределения заказов. Если не указана, то используется текущий день")  @RequestParam(value = "date", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) Optional<Date> date,@ApiParam(value = "Идентификатор курьера для получения списка распредленных заказов. Если не указан, возвращаются данные по всем курьерам.")  @RequestParam(value = "courier_id", required = false) Optional<Integer> courierId);


    /**
     * POST /couriers
     *
     * @param createCourierRequest  (required)
     * @return ok (status code 200)
     *         or bad request (status code 400)
     */
    @ApiOperation(value = "", nickname = "createCourier", notes = "", response = CreateCouriersResponse.class, tags={ "courier-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = CreateCouriersResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = Object.class) })
    @RequestMapping(value = "/couriers",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<CreateCouriersResponse> createCourier(@ApiParam(value = "" ,required=true )   @RequestBody CreateCourierRequest createCourierRequest);


    /**
     * GET /couriers/{courier_id}
     *
     * @param courierId Courier identifier (required)
     * @return ok (status code 200)
     *         or bad request (status code 400)
     *         or not found (status code 404)
     */
    @ApiOperation(value = "", nickname = "getCourierById", notes = "", response = CourierDto.class, tags={ "courier-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = CourierDto.class),
        @ApiResponse(code = 400, message = "bad request", response = Object.class),
        @ApiResponse(code = 404, message = "not found", response = Object.class) })
    @RequestMapping(value = "/couriers/{courier_id}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<CourierDto> getCourierById(@ApiParam(value = "Courier identifier",required=true) @PathVariable("courier_id") Long courierId);


    /**
     * GET /couriers/meta-info/{courier_id}
     *
     * @param courierId Courier identifier (required)
     * @param startDate Rating calculation start date (required)
     * @param endDate Rating calculation end date (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "", nickname = "getCourierMetaInfo", notes = "", response = GetCourierMetaInfoResponse.class, tags={ "courier-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GetCourierMetaInfoResponse.class) })
    @RequestMapping(value = "/couriers/meta-info/{courier_id}",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<GetCourierMetaInfoResponse> getCourierMetaInfo(@ApiParam(value = "Courier identifier",required=true) @PathVariable("courier_id") Long courierId,@ApiParam(value = "Rating calculation start date", required = true)  @RequestParam(value = "startDate", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) Date startDate,@ApiParam(value = "Rating calculation end date", required = true)  @RequestParam(value = "endDate", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) Date endDate);


    /**
     * GET /couriers
     *
     * @param limit Максимальное количество курьеров в выдаче. Если параметр не передан, то значение по умолчанию равно 1. (optional)
     * @param offset Количество курьеров, которое нужно пропустить для отображения текущей страницы. Если параметр не передан, то значение по умолчанию равно 0. (optional)
     * @return ok (status code 200)
     *         or bad request (status code 400)
     */
    @ApiOperation(value = "", nickname = "getCouriers", notes = "", response = GetCouriersResponse.class, tags={ "courier-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = GetCouriersResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = Object.class) })
    @RequestMapping(value = "/couriers",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<GetCouriersResponse> getCouriers(@ApiParam(value = "Максимальное количество курьеров в выдаче. Если параметр не передан, то значение по умолчанию равно 1.")  @RequestParam(value = "limit", required = false) Optional<Integer> limit,@ApiParam(value = "Количество курьеров, которое нужно пропустить для отображения текущей страницы. Если параметр не передан, то значение по умолчанию равно 0.")  @RequestParam(value = "offset", required = false) Optional<Integer> offset);

}
