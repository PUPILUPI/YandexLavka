/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CompleteOrderRequestDto;
import org.openapitools.model.CreateOrderRequest;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.LocalDate;
import org.openapitools.model.OrderAssignResponse;
import org.openapitools.model.OrderDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-06T14:41:42.473217200+03:00[Europe/Moscow]")
@Validated
@Tag(name = "order-controller", description = "the order-controller API")
public interface OrdersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /orders/complete
     *
     * @param completeOrderRequestDto  (required)
     * @return ok (status code 200)
     *         or bad request (status code 400)
     */
    @Operation(
        operationId = "completeOrder",
        tags = { "order-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ok", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/orders/complete",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<OrderDto>> completeOrder(
        @Parameter(name = "CompleteOrderRequestDto", description = "", required = true) @Valid @RequestBody CompleteOrderRequestDto completeOrderRequestDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 }, { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /orders
     *
     * @param createOrderRequest  (required)
     * @return ok (status code 200)
     *         or bad request (status code 400)
     */
    @Operation(
        operationId = "createOrder",
        tags = { "order-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ok", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<OrderDto>> createOrder(
        @Parameter(name = "CreateOrderRequest", description = "", required = true) @Valid @RequestBody CreateOrderRequest createOrderRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 }, { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /orders/{order_id}
     *
     * @param orderId Order identifier (required)
     * @return ok (status code 200)
     *         or bad request (status code 400)
     *         or not found (status code 404)
     */
    @Operation(
        operationId = "getOrder",
        tags = { "order-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orders/{order_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<OrderDto> getOrder(
        @Parameter(name = "order_id", description = "Order identifier", required = true, in = ParameterIn.PATH) @PathVariable("order_id") Long orderId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /orders
     *
     * @param limit Максимальное количество заказов в выдаче. Если параметр не передан, то значение по умолчанию равно 1. (optional)
     * @param offset Количество заказов, которое нужно пропустить для отображения текущей страницы. Если параметр не передан, то значение по умолчанию равно 0. (optional)
     * @return ok (status code 200)
     *         or bad request (status code 400)
     */
    @Operation(
        operationId = "getOrders",
        tags = { "order-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ok", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orders",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OrderDto>> getOrders(
        @Parameter(name = "limit", description = "Максимальное количество заказов в выдаче. Если параметр не передан, то значение по умолчанию равно 1.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "Количество заказов, которое нужно пропустить для отображения текущей страницы. Если параметр не передан, то значение по умолчанию равно 0.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 }, { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /orders/assign : Распределение заказов по курьерам
     * Для распределения заказов между курьерами учитываются следующие параметры: &lt;ul&gt;&lt;li&gt;вес заказа&lt;/li&gt;&lt;li&gt;регион доставки&lt;/li&gt;&lt;li&gt;стоимость доставки&lt;/li&gt;&lt;/ul&gt;
     *
     * @param date Дата распределения заказов. Если не указана, то используется текущий день (optional)
     * @return ok (status code 201)
     *         or bad request (status code 400)
     */
    @Operation(
        operationId = "ordersAssign",
        summary = "Распределение заказов по курьерам",
        description = "Для распределения заказов между курьерами учитываются следующие параметры: <ul><li>вес заказа</li><li>регион доставки</li><li>стоимость доставки</li></ul>",
        tags = { "order-controller" },
        responses = {
            @ApiResponse(responseCode = "201", description = "ok", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderAssignResponse.class)))
            }),
            @ApiResponse(responseCode = "400", description = "bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/orders/assign",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OrderAssignResponse>> ordersAssign(
        @Parameter(name = "date", description = "Дата распределения заказов. Если не указана, то используется текущий день", in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"date\" : \"2000-01-23\", \"couriers\" : [ { \"courier_id\" : 0, \"orders\" : [ { \"group_order_id\" : 6, \"orders\" : [ { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 }, { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 } ] }, { \"group_order_id\" : 6, \"orders\" : [ { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 }, { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 } ] } ] }, { \"courier_id\" : 0, \"orders\" : [ { \"group_order_id\" : 6, \"orders\" : [ { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 }, { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 } ] }, { \"group_order_id\" : 6, \"orders\" : [ { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 }, { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 } ] } ] } ] }, { \"date\" : \"2000-01-23\", \"couriers\" : [ { \"courier_id\" : 0, \"orders\" : [ { \"group_order_id\" : 6, \"orders\" : [ { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 }, { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 } ] }, { \"group_order_id\" : 6, \"orders\" : [ { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 }, { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 } ] } ] }, { \"courier_id\" : 0, \"orders\" : [ { \"group_order_id\" : 6, \"orders\" : [ { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 }, { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 } ] }, { \"group_order_id\" : 6, \"orders\" : [ { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 }, { \"regions\" : 1, \"cost\" : 5, \"completed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"weight\" : 6.0274563, \"delivery_hours\" : [ \"delivery_hours\", \"delivery_hours\" ], \"order_id\" : 0 } ] } ] } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
